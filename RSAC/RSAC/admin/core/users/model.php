<?php/*Publisher: Jamie NicholsDate: 5/21/2014Name: LoginType: ModelFunction: Do backend functions for the current pageas well as render the view it's self.*/class Users_Model extends Model{ //Define the class as a Model    function __construct()    { //Call the constructor which runs when the class is loaded        parent::__construct();//Call the main controller class constructor    }    /**     *     */    public function catchErrors(){        return (isset($_REQUEST['error']))?$this->getErrorResponse("login_".$_REQUEST['error'],array("%mins%"=>$this->getConfig('security_ban_time'))):null;    }	    public function doLogin() //Login in a user    {        $sth = $this->db->prepare("SELECT * FROM cms_users WHERE username = :username"); //Prepare to retrieve the user who has the same username and password provided        $sth->execute(array(':username' => $_REQUEST['username'])); //Execute mysql call and md5 the password provided using custom salt        $data = $sth->fetchAll();        if ($sth->rowCount() > 0) {            $banned = new DateTime($data[0]['banned_time']);            $now = new DateTime();            $mins = $now->diff($banned)->format("%i");            if ($data[0]['failed_attempts'] < $this->getConfig("security_max_attempts") && $mins>=$this->getConfig("security_ban_time")) {                $sth = $this->db->prepare("SELECT * FROM cms_users WHERE username = :username AND password = :password"); //Prepare to retrieve the user who has the same username and password provided                $sth->execute(array(':username' => $_REQUEST['username'], ':password' => myFunctions::getPasswordHash($_REQUEST['password'],$_REQUEST['username']))); //Execute mysql call and md5 the password provided using custom salt                $data = $sth->fetchAll(PDO::FETCH_ASSOC); //Set all results data to the data array                $count = $sth->rowCount(); //Set count to number of results                if ($count > 0) //if the number of results is greater than 0 log user in                {                    $ips = (myFunctions::contains($_SERVER['REMOTE_ADDR'], $data[0]['ips'])) ? $data[0]['ips'] : $data[0]['ips'] . "," . $_SERVER['REMOTE_ADDR'];                    $ips = ltrim($ips, ",");                    $sth = $this->db->prepare("UPDATE `cms_users` SET `ips`=:ips,`last_login`= NOW(),`logged_in`=1,`failed_attempts`=0 WHERE `id`=:id");                    $sth->execute(array(":ips" => $ips, ":id" => $data[0]['id']));                    //login by setting session data                    Session::init(); //initialize the session                    Session::set('loggedIn', true); //set user as logged in                    Session::set('user_id', $data[0]['id']); //set the users id                    Session::set('username', $data[0]['username']); //Set the users username                    Session::set('role', $data[0]['role']); //Set the users role                    header('location: ' . URL); //Redirect user to the home page                } else {                    $sth = $this->db->prepare("UPDATE `cms_users` SET `failed_attempts`=failed_attempts+1 WHERE `username`=:username");                    $sth->execute(array(":username" => $_REQUEST['username']));                    //error                    header('location: ' . URL . 'users/login?error=1&uname='.$_REQUEST['username']); //Redirect back to login screen.                }            } else {                    $sth = $this->db->prepare("UPDATE `cms_users` SET `banned_time`=NOW(), `failed_attempts`=0 WHERE id=:id");                    $sth->execute(array(":id" => $data[0]['id']));                    header('location: ' . URL . 'users/login?error=3');            }        } else {            $sth = $this->db->prepare('INSERT INTO cms_login_fails (`ip`,`username`,`time`) VALUE(:ip,:username,NOW())');            $sth->execute(array(":ip" => $_SERVER['REMOTE_ADDR'], ":username" => $_REQUEST['username']));            header('location: ' . URL . 'users/login?error=2'); //Redirect back to login screen        }    }    public function logout()    { //Logout user        $sth = $this->db->prepare("UPDATE `cms_users` SET `logged_in`=0 WHERE `id`=:id");        $sth->execute(array(":id" => Session::get("user_id")));        Session::destroy(); //Call the destroy session function from the session class        header('location: ' . URL); //Redirect back to the login screen.    }		public function doRegister()    {		$admin = $this->user_exists("admin");        $count = $this->user_exists($_REQUEST['username']);        if ($count > 0) {            header('location: ' . URL . 'users/register?error=username');            exit;        }		$sql = "INSERT INTO cms_users (username,password,last_login,ips,banned_time".($admin==0?",role":"").") VALUES (:username,:password,NOW(),:ip,:past".($admin==0?",'1'":"").")";        $sth1 = $this->db->prepare($sql);        $sth1->execute(array(':username' => strtolower($_REQUEST['username']), ':password' => myFunctions::getPasswordHash($_REQUEST['password'],$_REQUEST['username']),            ":ip"=>$_SERVER['REMOTE_ADDR'],":past"=>strtotime("-30 minutes")));		sleep(1);				 $sth2 = $this->db->prepare("SELECT * FROM cms_users WHERE `username` = :username AND `password` = :password");		 $sth2->execute(array(':username' => $_REQUEST['username'], ':password' => Hash::create('md5', $_REQUEST['username'].$_REQUEST['password'], PASSWORD_HASH_KEY)));        $data = $sth2->fetchAll();				sleep(1);		//login		Session::init();		Session::set('loggedIn', true);		Session::set('username', $data[0]['username']);		Session::set('role', $data[0]['role']);		Session::set('user_id', $data[0]['id']);		header('location: ' . URL);    }    public function user_exists($username)    {        $sth = $this->db->prepare("SELECT * FROM `cms_users` WHERE `username` = :username");        $sth->execute(array(':username' => strtolower($username)));        return count($sth->fetchAll());    }	}?>