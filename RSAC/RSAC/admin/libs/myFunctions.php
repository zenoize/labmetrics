<?phpclass myFunctions{    public static function sendEmail($to,$from,$subject,$template,$replacers){        $headers = "From: " . strip_tags($from) . "\r\n";        $headers .= "Reply-To: ". strip_tags($from) . "\r\n";        $headers .= "MIME-Version: 1.0\r\n";        $headers .= "Content-Type: text/html; charset=ISO-8859-1\r\n";        $message = file_get_contents(FULL_PATH."includes/email_templates/".$template);        foreach($replacers as $key=>$value){            $message = str_replace($key,$value,$message);        }        //if($to=="jamie337nichols@gmail.com"){        mail($to, $subject, $message, $headers);        //die();        //}    }	    //return a boolean for if a string exists in a file or not    public static function contains($substring, $string)    {        $pos = strpos($string, $substring);        if ($pos === false) {            // string needle NOT found in haystack            return false;        } else {            // string needle found in haystack            return true;        }    }    public static function isEven($value)    {        if ($value % 2 == 0)            return true;        else            return false;    }    public static function get_page($url)    {        $ch = curl_init();        curl_setopt($ch, CURLOPT_URL, ''.$url.'');        curl_setopt($ch, CURLOPT_HTTPGET, 1);        curl_setopt ($ch, CURLOPT_HEADER, 0);        curl_setopt ($ch, CURLOPT_USERAGENT, sprintf("Mozilla/%d.0",rand(4,5)));        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);        curl_setopt($ch, CURLOPT_MAXREDIRS, 10);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        $curl_response_res = curl_exec ($ch);        curl_close ($ch);        return $curl_response_res;    }	    public static function xml2array ( $xmlObject, $out = array () ){        foreach ( (array) $xmlObject as $index => $node )            $out[$index] = ( is_object ( $node ) ) ? myFunctions::xml2array ( $node ) : $node;        return $out;    }	    public static function recurse_copy($src,$dst) {        $dir = opendir($src);        @mkdir($dst);        while(false !== ( $file = readdir($dir)) ) {            if (( $file != '.' ) && ( $file != '..' )) {                if ( is_dir($src . '/' . $file) ) {                    recurse_copy($src . '/' . $file,$dst . '/' . $file);                }                else {                    copy($src . '/' . $file,$dst . '/' . $file);                }            }        }        closedir($dir);    }    public static function timeSince($date){        $now = time(); // or your date as well        $your_date = strtotime($date);        $datediff = $now - $your_date;        $timeSince = floor($datediff/(60*60*24));        return $timeSince;    }	    public static function _date($format="r", $timestamp=false, $timezone=false)    {        $userTimezone = new DateTimeZone(!empty($timezone) ? $timezone : 'GMT');        $gmtTimezone = new DateTimeZone('GMT');        $myDateTime = new DateTime(($timestamp!=false?date("r",(int)$timestamp):date("r")), $gmtTimezone);        $offset = $userTimezone->getOffset($myDateTime);        return date($format, ($timestamp!=false?(int)$timestamp:$myDateTime->format('U')) + $offset);    }		public static function getPasswordHash($password,$username){		return Hash::create('md5', $password.$username, PASSWORD_HASH_KEY);	}}