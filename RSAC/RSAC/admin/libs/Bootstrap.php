<?phpclass Bootstrap {    function __construct()    {        $url = isset($_REQUEST['url']) ? $_REQUEST['url'] : null;        $drop = str_replace("/", "", URL);        $url = rtrim($url, "/");        $url = explode('/', $url);		        $i = 0;        $deletes = false;        foreach ($url as $value) {            if ($value == $drop) {                $deletes = true;                $unsets = $i;            }            $i++;        }        if ($deletes) unset($url[$unsets]);        if (empty($url[0])) {						$GLOBALS['CORE'] = 'index';			            require 'core/index/controller.php';            $controller = new Index("index");            $controller->loadModel("index");            $controller->index();									            return false;        }		if(file_exists('core/' . $url[0] . "/controller.php")){			$file = 'core/' . $url[0] . "/controller.php";			$GLOBALS['CORE'] = $url[0];		}else{			$file = 'plugins/' . $url[0] . "/controller.php";			$GLOBALS['PLUGIN'] = $url[0];		}			        if (file_exists($file)) {            require $file;            $controller = new $url[0]($url[0]);            $controller->loadModel($url[0]);        } else {            $this->error();        }        //calling methods        if (isset($url[2])) {            if (method_exists($controller, $url[1])) {                $controller->{$url[1]}($url[2]);            } else {                $this->error();            }        } else {            if (isset($url[1])) {                if (@method_exists($controller, $url[1])) {                    $controller->{$url[1]}();                } else {                    $this->error();                }            } else {                if (@method_exists($controller, 'index')) $controller->index();            }        }    }    function error()    {        require 'core/error/controller.php';        $controller = new Error($url[0]);        $controller->loadModel("error");        $controller->index();        return false;    }}?>