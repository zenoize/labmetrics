<?phpclass Model{    function __construct()    {        $this->db = new Database();		$this->page = ($GLOBALS['PLUGIN'])?$GLOBALS['PLUGIN']:$GLOBALS['CORE'];    }    public function getErrorResponse($code,$replace){        $sth = $this->db->prepare("SELECT * FROM cms_errors WHERE code=:code");        $sth->execute(array(":code"=>$code));        $results = $sth->fetchAll(PDO::FETCH_ASSOC);        $response = $results[0]['response'];        forEach($replace as $key=>$value)$response = str_replace($key,$value,$response);        return $response;    }    public function getConfig($prop){        $sth = $this->db->prepare("SELECT * FROM cms_config WHERE property_name=:prop");        $sth->execute(array(":prop"=>$prop));        if($results = $sth->fetchAll(PDO::FETCH_ASSOC)){			return $results[0]['value'];		}else{			$this->install(true);			return "install";		}    }			public function install($override = false){		if(Session::get("role")!=ADMIN_ROLE && !$override){			header('location:'.URL);			exit();		}else{			$plug_conf = FULL_PATH."plugins/".$GLOBALS['PLUGIN']."/config.json";			$core_conf = FULL_PATH."core/".$GLOBALS['CORE']."/config.json";			$conf = (file_exists($plug_conf)?$plug_conf:$core_conf);						if(file_exists($conf)){								$config = json_decode(file_get_contents($conf),1);				$sql = "";				foreach($config['tables'] as $table){					$uniques = array();					if(isset($table['columns'])){						$sql .= "CREATE TABLE `".$table['name']."`( ";						$sql .= "id int NOT NULL AUTO_INCREMENT,";						foreach($table['columns'] as $column){							if(isset($column['unique']))array_push($uniques,$column['name']);							$sql .= "`".$column['name']."` ".$column['type'];							if(!isset($column['length']))								$sql .=" ";							else								$sql .="(".$column['length'].") ";								$sql .="NOT NULL ";								if(isset($column['default']))									$sql .= "DEFAULT '".$column['default']."'";							$sql .=", ";						}						foreach($uniques as $col){							$sql .="UNIQUE (".$col."),";						}						$sql.="PRIMARY KEY (id));\r\n";					}					if(isset($table['rows'])){						foreach($table['rows'] as $row){							$sql .="INSERT INTO `$table[name]` (";							foreach($row as $col)								$sql .="`$col[column]`,";							$sql = rtrim($sql,",");							$sql .=") VALUES(";							foreach($row as $col)								$sql .="'$col[value]',";							$sql = rtrim($sql,",");							$sql .=");\r\n";						}					}				}				$create = $this->db->prepare($sql);				$create->execute();			}			if(isset($config['script'])){				eval($config['script']);			}else{				header("location: ".URL.($GLOBALS['PLUGIN']?$GLOBALS['PLUGIN']:$GLOBALS['CORE']));						}		}	}		public function uninstall(){		if(Session::get("role")!=1){			echo "Permission Denied";			header('location: '.URL);			exit();		}else{			$plug_conf = FULL_PATH."plugins/".$GLOBALS['PLUGIN']."/config.json";			$core_conf = FULL_PATH."core/".$GLOBALS['CORE']."/config.json";			$conf = (file_exists($plug_conf)?$plug_conf:$core_conf);			if(file_exists($conf)){				$config = json_decode(file_get_contents($conf),1);				$sql = "";				foreach($config['tables'] as $table){					if(isset($table['columns'])){						$sql .= "DROP TABLE `$table[name]`;";					}elseif(isset($table['rows'])){						foreach($table['rows'] as $row){							$sql .="DELETE FROM `$table[name]` WHERE ";							foreach($row as $col){								$sql .="`$col[column]` = '$col[value]' AND ";							}							$sql = rtrim($sql,"AND ");							$sql .=";";						}					}				}				$uninstall = $this->db->prepare($sql);				$uninstall->execute();			}			header("location: ".URL);		}	}	}?>